node
{
	stage ('Code Checkout') 
	{
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git', url: 'git@github.com:AlexViki/laba8_jenkins_sonarqube_ansible.git']]])
	}
	
	stage ('Installing SW')
	{
		script
		{
			echo '---------Installing Azure---------'
//			sh 'sudo apt-get update'
//			sh 'sudo curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
			withCredentials([azureServicePrincipal('SP_laba_08')])
			{
				sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
			}
			echo '---------Installing Ansible---------'
//			sh 'sudo apt-get install -y libssl-dev libffi-dev python-dev python-pip'
//			sh 'sudo pip install ansible'
//			sh 'sudo pip install ansible[azure]'
		}
	}

	stage ('Quality Code')
	{
		script
		{
			def scannerHome = tool 'SonarQubeScaner';
			withSonarQubeEnv("SonarQubeServer")
			{
				sh "${tool("SonarQubeScaner")}/bin/sonar-scanner"
            }

        }
	}

	stage("Quality Gate")
	{
		sleep(10)
		timeout(time: 1, unit: 'MINUTES')
		{
			def qg = waitForQualityGate()
			print "Finished waiting"
			if (qg.status != 'OK')
				{
					error "Pipeline aborted due to quality gate failure: ${qg.status}"
				}
		}
    }

	stage ('Quality YML')
	{
		script
		{
			echo '----> Test YML file'
			sh 'ansible-playbook --syntax-check $WORKSPACE/ansible/roles/nginx/tasks/create_vm.yml'
		}
	}

	stage('Deploy VM...')
	{
		script
		{
			echo '----> Deploy new VM via Ansible'
			sh 'ansible-playbook -i $WORKSPACE/ansible/hosts.txt $WORKSPACE/ansible/roles/nginx/tasks/create_vm.yml'
		}
    }

	stage('PreSettings')
	{
		script
		{
			echo '----> INFO VM'
			sh 'echo "[server_web]" > $WORKSPACE/ansible/host_vm.txt'
			sh 'az vm show -d -g laba08-rg -n laba08-vm --query publicIps -o tsv >> $WORKSPACE/ansible/host_vm.txt'
//			sh 'sudo rm -rf /etc/ansible && sudo mkdir /etc/ansible'
//			sh 'sudo cp $WORKSPACE/ansible/ansible.cfg /etc/ansible/ansible.cfg'
//			sh 'ansible -i $WORKSPACE/ansible/host_vm.txt all -m ping'

//			sh 'ansible-playbook -i $WORKSPACE/ansible/host_vm.txt $WORKSPACE/ansible/roles/nginx/tasks/ping.yml'
			sh 'ansible-playbook -i $WORKSPACE/ansible/host_vm.txt $WORKSPACE/ansible/info.yml'

			sh 'sudo rm -rf /tmp/web && sudo rm -rf /tmp/config'
			sh 'sudo mkdir /tmp/web && sudo cp -R $WORKSPACE/src/* /tmp/web'
			sh 'sudo mkdir /tmp/config && sudo cp -R $WORKSPACE/ansible/roles/nginx/templates/app_site.cfg /tmp/config/app_site.cfg'
			sh 'sudo cp -R $WORKSPACE/ansible/roles/nginx/templates/.htpasswd /tmp/config'
		}
    }

	stage('Setup')
	{
		script
		{
			sh 'ansible-playbook -i $WORKSPACE/ansible/host_vm.txt $WORKSPACE/ansible/nginx.yml'
		}
    }
			
////////////////////////////////////////////////////////////////	
}