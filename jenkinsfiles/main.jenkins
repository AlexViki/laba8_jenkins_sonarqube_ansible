node
{
	stage ('Code Checkout') 
	{
		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'git', url: 'git@github.com:AlexViki/laba8_jenkins_sonarqube_ansible.git']]])
	}
	
	stage ('Code Quality')
	{
		script
		{
			def scannerHome = tool 'SonarQubeScaner';
			withSonarQubeEnv("SonarQubeServer")
			{
				sh "${tool("SonarQubeScaner")}/bin/sonar-scanner"
            }

        }
	}
	
	stage("Quality Gate")
	{
		sleep(10)
		timeout(time: 1, unit: 'MINUTES')
		{
			def qg = waitForQualityGate()
			print "Finished waiting"
			if (qg.status != 'OK')
				{
					error "Pipeline aborted due to quality gate failure: ${qg.status}"
				}
		}
    }

	stage('Testing files...')
	{
		parallel
		{
			stage ('YML file')
			{
				steps
				{
					echo '----> Test YML file'
					sh 'ansible-playbook --syntax-check ${WORKSPACE}/cfg/create_vm.yml'
				}
			}
			stage ('Version')
			{
				steps
				{
					echo '----> Test version'
					sh 'ansible --version'
					sh 'az --version'
				}
			}
		}
	}
	
	stage ('Installing SW')
	{
		script
		{
			echo '---------Installing Azure---------'
			sh 'sudo apt-get update'
			sh 'sudo curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash'
			withCredentials([azureServicePrincipal('SP_laba_08')])
			{
				sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
			}
			echo '---------Installing Ansible---------'
			sh 'sudo apt-get install -y libssl-dev libffi-dev python-dev python-pip'
			sh 'sudo pip install ansible'
			sh 'sudo pip install ansible[azure]'
		}
	}
}